# Build with new api?
%if 0%{?fedora} >= 30 || 0%{?rhel} >= 9
%bcond_without new_api
%else
%bcond_with    new_api
%endif


# Build the compat package?
%if !(0%{?fedora} >= 999 || 0%{?rhel} >= 99) && %{with new_api}
%bcond_without compat_pkg
%else
%bcond_with    compat_pkg
%endif


# Replace obsolete functions with a stub?
%if (0%{?fedora} >= 30 || 0%{?rhel} >= 9) && %{with compat_pkg}
%bcond_without enosys_stubs
%else
%bcond_with    enosys_stubs
%endif


# Build the static library?
%bcond_without staticlib


# Use failure-tokens as return value?
%bcond_with    failure_tokens


# Install compatibility files for libxcrypt <= 3.x?
%bcond_without xcrypt_compat_files


# Run memcheck?
%ifarch %{valgrind_arches}
# Valgrind does not work well on %%{power64} arches.
%ifarch %{power64}
%bcond_with    memcheck
%else
%bcond_without memcheck
%endif
%else
%bcond_with    memcheck
%endif


# Shared object version of libcrypt.
%if %{with new_api}
%global sov  2
%else
%global sov  1
%endif

%if %{with compat_pkg}
%global csov 1
%endif


# First version of glibc built without libcrypt.
%global glibc_minver 2.27


# Minimum version of meson required to build.
%global meson_minver 0.50


# Hash methods and API supported by libcrypt.
# NEVER EVER touch this, if you do NOT know what you are doing!
%global hash_methods   all

%if %{with new_api}
%global obsolete_api   false
%else
%global obsolete_api   glibc
%endif

%if %{with compat_pkg}
%global compat_methods all
%global compat_api     glibc
%endif


# Do we replace the obsolete API functions with stubs?
%if %{with enosys_stubs}
%global enosys_stubs   true
%else
%global enosys_stubs   false
%endif


# Do we enable returning failure tokens (*0/*1)?
%if %{with failure_tokens}
%global failure_tokens true
%else
%global failure_tokens false
%endif


# Do we enable returning failure tokens (*0/*1)?
%if %{with xcrypt_compat_files}
%global xcrypt_compat_files true
%else
%global xcrypt_compat_files false
%endif


# Needed for the distribution README file.
%if 0%{?fedora}
%global distname .fedora
%else
%if 0%{?rhel}
%global distname .rhel
%else
%global distname .distribution
%endif
%endif


# Needed for out-of-tree builds.
%global builddir_system %(echo '%{name}_system-%{_vpath_builddir}')
%global builddir_compat %(echo '%{name}_compat-%{_vpath_builddir}')
%global builddir_static %(echo '%{name}_static-%{_vpath_builddir}')


# Common configuration options.
%global meson_config_common                    \\\
  -Dfailure-tokens=%{failure_tokens}           \\\
  -Dxcrypt-compat-files=%{xcrypt_compat_files}


# Common configuration options for the shared library.
%global meson_config_shared \\\
  -Ddefault_library=shared  \\\
  -Dunity=on


# Common configuration options for the system library
# and static library.
%global meson_config_syslib             \\\
  %{meson_config_common}                \\\
  -Dobsolete-api=%{obsolete_api}        \\\
%if %{without new_api}                  \
  -Dobsolete-api-enosys=%{enosys_stubs} \\\
%endif                                  \
  -Dhashes=%{hash_methods}


# Configuration options for the compatibility library.
%global meson_config_compat             \\\
  %{meson_config_shared}                \\\
  %{meson_config_common}                \\\
  -Dhashes=%{compat_methods}            \\\
  -Dobsolete-api=%{compat_api}          \\\
  -Dobsolete-api-enosys=%{enosys_stubs}


# Common options for running the testsuite.
%global meson_test_common             \\\
  --timeout-multiplier=4


# Common options for running the memtests.
%global meson_test_valgrind           \\\
  --timeout-multiplier=40             \\\
  --wrap=valgrind


# Add generation of HMAC checksums of the final stripped
# binaries.  %%define with lazy globbing is used here
# intentionally, because using %%global does not work.
%define __spec_install_post                           \
%{?__debug_package:%{__debug_install_post}}           \
%{__arch_install_post}                                \
%{__os_install_post}                                  \
if [[ %{with staticlib} == 1 ]]; then                 \
  fipshmac %{buildroot}%{_libdir}/libcrypt.a          \
  if [[ %{with xcrypt_compat_files} == 1 ]]; then     \
    ln -s .libcrypt.a.hmac                            \\\
      %{buildroot}%{_libdir}/.libxcrypt.a.hmac        \
  fi                                                  \
fi                                                    \
if [[ %{with compat_pkg} == 1 ]]; then                \
  fipshmac %{buildroot}%{_libdir}/libcrypt.so.%{csov} \
fi                                                    \
fipshmac %{buildroot}%{_libdir}/libcrypt.so.%{sov}    \
%{nil}


Name:           {{{ git_dir_name }}}
Version:        {{{ git_dir_version lead=4.5 follow=0}}}
Release:        1%{?dist}
Summary:        Extended crypt library for descrypt, md5crypt, bcrypt, and others

# For explicit license breakdown, see the
# LICENSING file in the source tarball.
License:        LGPLv2+ and BSD and Public Domain
URL:            https://github.com/besser82/%{name}
VCS:            {{{ git_dir_vcs }}}

Source0:        {{{ git_dir_pack }}}

BuildRequires:  fipscheck
BuildRequires:  gcc
BuildRequires:  glibc-devel           >= %{glibc_minver}
BuildRequires:  meson                 >= %{meson_minver}
%if %{with memcheck}
BuildRequires:  valgrind
%endif

# We do not need to keep this forever.
%if !(0%{?fedora} > 31 || 0%{?rhel} > 10)
# Inherited from former libcrypt package.
Obsoletes:      libcrypt-nss           < %{glibc_minver}
Provides:       libcrypt-nss           = %{glibc_minver}
Provides:       libcrypt-nss%{?_isa}   = %{glibc_minver}

# Obsolete former libcrypt properly and provide a virtual libcrypt
# package as it has been done by the former packages, which were
# built by glibc before.
Obsoletes:      libcrypt               < %{glibc_minver}
Provides:       libcrypt               = %{glibc_minver}
Provides:       libcrypt%{?_isa}       = %{glibc_minver}

# Obsolete former libxcrypt-common properly.
Obsoletes:      %{name}-common         < 4.3.3-4
Provides:       %{name}-common         = %{version}-%{release}
%endif

%if %{with new_api} && %{without compat_pkg}
Obsoletes:      %{name}-compat         < %{version}-%{release}
%endif

# We need a version of glibc, that doesn't build libcrypt anymore.
Requires:       glibc%{?_isa}         >= %{glibc_minver}

%if 0%{?fedora} >= 30
Recommends:     mkpasswd
%endif

%description
libxcrypt is a modern library for one-way hashing of passwords.  It
supports a wide variety of both modern and historical hashing methods:
yescrypt, gost-yescrypt, scrypt, bcrypt, sha512crypt, sha256crypt,
md5crypt, SunMD5, sha1crypt, NT, bsdicrypt, bigcrypt, and descrypt.
It provides the traditional Unix crypt and crypt_r interfaces, as well
as a set of extended interfaces pioneered by Openwall Linux, crypt_rn,
crypt_ra, crypt_gensalt, crypt_gensalt_rn, and crypt_gensalt_ra.

libxcrypt is intended to be used by login(1), passwd(1), and other
similar programs; that is, to hash a small number of passwords during
an interactive authentication dialogue with a human. It is not suitable
for use in bulk password-cracking applications, or in any other situation
where speed is more important than careful handling of sensitive data.
However, it is intended to be fast and lightweight enough for use in
servers that must field thousands of login attempts per minute.
%if %{with new_api}
This version of the library does not provide the legacy API functions
that have been provided by glibc's libcrypt.so.1.
%endif


%if %{with compat_pkg}
%package        compat
Summary:        Compatibility library providing legacy API functions

Requires:       %{name}%{?_isa}        = %{version}-%{release}
Requires:       glibc%{?_isa}         >= %{glibc_minver}

%description    compat
This package contains the library providing the compatibility API
for applications that are linked against glibc's libxcrypt, or that
are still using the unsafe and deprecated, encrypt, encrypt_r,
setkey, setkey_r, and fcrypt functions, which are still required by
recent versions of POSIX, the Single UNIX Specification, and various
other standards.

All existing binary executables linked against glibc's libcrypt should
work unmodified with the library supplied by this package.
%endif


%package        devel
Summary:        Development files for %{name}

Conflicts:      man-pages              < 4.15-3

Requires:       %{name}%{?_isa}        = %{version}-%{release}
Requires:       glibc-devel%{?_isa}   >= %{glibc_minver}

%description    devel
The %{name}-devel package contains libraries and header files for
developing applications that use %{name}.


%if %{with staticlib}
%package        static
Summary:        Static library for -static linking with %{name}

Requires:       %{name}-devel%{?_isa}  = %{version}-%{release}
Requires:       glibc-devel%{?_isa}   >= %{glibc_minver}
Requires:       glibc-static%{?_isa}  >= %{glibc_minver}

%description    static
This package contains the libxcrypt static library for -static
linking.

You don't need this, unless you link statically, which is highly
discouraged.
%endif


%prep
{{{ git_dir_setup_macro }}}

%if %{with new_api}
cat << EOF >> README%{distname}
This version of the %{name} package ships the libcrypt.so.2
library and does not provide the legacy API functions that have
been provided by glibc's libcrypt.so.1.  The removed functions
by name are encrypt, encrypt_r, setkey, setkey_r, and fcrypt.
%if %{with compat_pkg}

If you are using a third-party application that links against
those functions, or that is linked against glibc's libcrypt,
you may need to install the %{name}-compat package manually.

All existing binary executables linked against glibc's libcrypt
should work unmodified with the libcrypt.so.1 library supplied
by the %{name}-compat package.
%endif
EOF
%endif

%if %{with enosys_stubs}
cat << EOF >> README.posix
This version of the libcrypt.so.1 library has entirely removed
the functionality of the encrypt, encrypt_r, setkey, setkey_r,
and fcrypt functions, while keeping fully binary compatibility
with existing (third-party) applications possibly still using
those funtions.  If such an application attemps to call one of
these functions, the corresponding function will indicate that
it is not supported by the system in a POSIX-compliant way.

For security reasons, the encrypt and encrypt_r functions will
also overwrite their data-block argument with random bits.

All existing binary executables linked against glibc's libcrypt
should work unmodified with the provided version of the
libcrypt.so.1 library in place.
EOF
%endif

%if %{with staticlib}
cat << EOF >> README.static
Applications that use certain legacy APIs supplied by glibc’s
libcrypt (encrypt, encrypt_r, setkey, setkey_r, and fcrypt)
cannot be compiled nor linked against the supplied build of
the object files provided in the static library libcrypt.a.
EOF
%endif


%build
# Build the default system library.
%global _vpath_builddir %{builddir_system}
%meson                   \
  %{meson_config_shared} \
  %{meson_config_syslib}
%meson_build

# Build the compatibility library.
%if %{with compat_pkg}
%global _vpath_builddir %{builddir_compat}
%meson                   \
  %{meson_config_compat}
%meson_build
%endif

# Build the static library.
%if %{with staticlib}
%global _vpath_builddir %{builddir_static}
%meson                     \
  -Ddefault_library=static \
  -Dunity=off              \
  %{meson_config_syslib}
%meson_build
%endif


%install
# Create a temporary location for intermediate copies.
mkdir -p ./install_tmp

# Install the static library and move it to a temporary location.
%if %{with staticlib}
%global _vpath_builddir %{builddir_static}
rm -fr %{buildroot}/*
%meson_install
mv %{buildroot}%{_libdir}/lib{,x}crypt.a ./install_tmp
%endif

# Install the compat library and move it to a temporary location.
%if %{with compat_pkg}
%global _vpath_builddir %{builddir_compat}
rm -fr %{buildroot}/*
%meson_install
mv %{buildroot}%{_libdir}/libcrypt.so.%{csov} ./install_tmp
%endif

# Install the default system library at last.
%global _vpath_builddir %{builddir_system}
rm -fr %{buildroot}/*
%meson_install

# Install files from intermediate location and clean up.
%if %{with staticlib} || %{with compat_pkg}
mv ./install_tmp/* %{buildroot}%{_libdir}
%endif
rm -fr ./install_tmp

# Install documentation to shared %%_pkgdocdir.
install -Dpm 0644 -t %{buildroot}%{_pkgdocdir} \
  ChangeLog NEWS README* THANKS TODO*


%check
%global _vpath_builddir %{builddir_system}
%meson_test              \
  %{meson_test_common}

%if %{with compat_pkg}
%global _vpath_builddir %{builddir_compat}
%meson_test              \
  %{meson_test_common}
%endif

%if %{with staticlib}
%global _vpath_builddir %{builddir_static}
%meson_test              \
  %{meson_test_common}
%endif

%if %{with memcheck}
%global _vpath_builddir %{builddir_system}
%meson_test               \
  %{meson_test_valgrind}
%endif


%ldconfig_scriptlets
%if %{with compat_pkg}
%ldconfig_scriptlets compat
%endif


%files
%doc %dir %{_pkgdocdir}
%doc %{_pkgdocdir}/NEWS
%doc %{_pkgdocdir}/README.md
%if %{with new_api}
%doc %{_pkgdocdir}/README%{distname}
%endif
%if %{with enosys_stubs} && %{without compat_pkg}
%doc %{_pkgdocdir}/README.posix
%endif
%doc %{_pkgdocdir}/THANKS
%license AUTHORS COPYING.LIB LICENSING
%{_libdir}/.libcrypt.so.%{sov}.hmac
%{_libdir}/libcrypt.so.%{sov}
%{_mandir}/man5/crypt.5.*


%if %{with compat_pkg}
%files          compat
%if %{with enosys_stubs}
%doc %{_pkgdocdir}/README.posix
%endif
%{_libdir}/.libcrypt.so.%{csov}.hmac
%{_libdir}/libcrypt.so.%{csov}
%endif


%files          devel
%doc %{_pkgdocdir}/ChangeLog
%doc %{_pkgdocdir}/TODO.md
%if %{with xcrypt_compat_files}
%{_includedir}/xcrypt.h
%{_libdir}/libxcrypt.so
%endif
%{_includedir}/crypt.h
%{_libdir}/libcrypt.so
%{_libdir}/pkgconfig/%{name}.pc
%{_mandir}/man3/crypt{,_r,_ra,_rn}.3.*
%{_mandir}/man3/crypt_checksalt.3.*
%{_mandir}/man3/crypt_gensalt{,_ra,_rn}.3.*
%{_mandir}/man3/crypt_preferred_method.3.*


%if %{with staticlib}
%files          static
%doc %{_pkgdocdir}/README.static
%if %{with xcrypt_compat_files}
%{_libdir}/.libxcrypt.a.hmac
%{_libdir}/libxcrypt.a
%endif
%{_libdir}/.libcrypt.a.hmac
%{_libdir}/libcrypt.a
%endif


%changelog
{{{ git_dir_changelog }}}
