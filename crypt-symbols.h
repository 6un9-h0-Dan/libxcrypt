#ifndef _CRYPT_SYMBOLS_H
#define _CRYPT_SYMBOLS_H 1

#include "config.h"

/* Suppression of unused-argument warnings.  */
#if defined __cplusplus
# define ARG_UNUSED(x) /*nothing*/
#elif defined __GNUC__ && __GNUC__ >= 3
# define ARG_UNUSED(x) x __attribute__ ((__unused__))
#else
# define ARG_UNUSED(x) x
#endif

/* Per-symbol version tagging.  Currently we only know how to do this
   using GCC extensions.  */

#if defined __GNUC__ && __GNUC__ >= 3

/* Define ALIASNAME as a strong alias for NAME.  */
#define strong_alias(name, aliasname) _strong_alias(name, aliasname)
#define _strong_alias(name, aliasname) \
  extern __typeof (name) aliasname __attribute__ ((alias (#name)))

/* Set the symbol version for EXTNAME, which uses INTNAME as its
   implementation.  There are three nested macros here so that
   EXTNAME, INTNAME, and VERSION_<intname> all get macro-expanded
   before the stringification happens.  */
#define set_symver(extname, intname, mode) \
  set_symver_2 (extname, intname, mode, VERSION_##intname)
#define set_symver_2(extname, intname, mode, version) \
  set_symver_3 (extname, intname, mode, version)
#define set_symver_3(extname, intname, mode, version) \
  __asm__(".symver " #intname "," #extname mode #version)

#else
#error "Don't know how to do symbol versioning with this compiler"
#endif

/* The macros for versioned symbols work differently in this library
   than they do in glibc.  Suppose a function 'frob' has two versions,
   the current default one and an older one preserved for compatibility.
   You write

       int frob(int x, int y)
       {
          // current version
       }
       #if COMPAT_frob_v1    // || COMPAT_frob_v2 || ...
       default_symbol(frob, frob);
       #endif

       #if COMPAT_frob_v1
       int frob_v1(int x, int y)
       {
           // old version
       }
       compat_symbol(frob, frob_v1);
       #endif

   and the macros in this file take care of the rest; in particular,
   the desired symbol versions for frob are not embedded in the
   source file.

   Another pattern is for withdrawn APIs:

       #if COMPAT_frob
       int frob(int x, int y)
       {
           // not to be used in new code
       }
       compat_symbol(frob, frob);
       #endif

   Because there is no default symbol version, the dynamic linker will
   still resolve 'frob' for old binaries, but new programs that use
   'frob' will fail to link.  */

/* -DPIC is not exactly the same as "this is a shared library" but it's
   the only preprocessor macro libtool gives us.  */
#ifdef PIC

#define compat_symbol_ref(extname, intname) set_symver(extname, intname, "@")
#define compat_symbol(extname, intname) set_symver(extname, intname, "@")
#define default_symbol(extname, intname) set_symver(extname, intname, "@@")

#else

/* When compiling a static library, all of the COMPAT_* symbols
   evaluate to false and 'compat_symbol' and 'default_symbol' expand
   to no-op asms.  They are no-op asms, rather than nothing, so that
   they will have the same syntactic significance regardless of
   compilation mode.  */
#define compat_symbol_ref(extname, intname) set_symver(extname, intname, "@")
#define compat_symbol(extname, intname) __asm__("")
#define default_symbol(extname, intname) __asm__("")

#endif

/* Stuff below this point will be autogenerated eventually.  */

#if !defined PIC || !ENABLE_OBSOLETE_API

#define COMPAT_bigcrypt       0
#define COMPAT_crypt__glibc   0
#define COMPAT_crypt_r__glibc 0
#define COMPAT_encrypt        0
#define COMPAT_encrypt_r      0
#define COMPAT_fcrypt         0
#define COMPAT_setkey         0
#define COMPAT_setkey_r       0

#else

#define COMPAT_bigcrypt       1
#define COMPAT_crypt__glibc   1
#define COMPAT_crypt_r__glibc 1
#define COMPAT_encrypt        1
#define COMPAT_encrypt_r      1
#define COMPAT_fcrypt         1
#define COMPAT_setkey         1
#define COMPAT_setkey_r       1

#endif

#define VERSION_crypt          XCRYPT_2.0
#define VERSION_crypt_r        XCRYPT_2.0

#define VERSION_bigcrypt       GLIBC_2.0
#define VERSION_crypt__glibc   GLIBC_2.0
#define VERSION_crypt_r__glibc GLIBC_2.0
#define VERSION_encrypt        GLIBC_2.0
#define VERSION_encrypt_r      GLIBC_2.0
#define VERSION_fcrypt         GLIBC_2.0
#define VERSION_setkey         GLIBC_2.0
#define VERSION_setkey_r       GLIBC_2.0

/* Rename all of the internal-but-global symbols with a _crypt_ prefix
   so that they do not interfere with other people's code when linking
   statically.  This is validated by test-symbols.sh.  */

#define comp_maskl               _crypt_comp_maskl
#define comp_maskr               _crypt_comp_maskr
#define crypt_bcrypt_rn          _crypt_crypt_bcrypt_rn
#define crypt_des_big_rn         _crypt_crypt_des_big_rn
#define crypt_des_trd_or_big_rn  _crypt_crypt_des_trd_or_big_rn
#define crypt_des_xbsd_rn        _crypt_crypt_des_xbsd_rn
#define crypt_md5_rn             _crypt_crypt_md5_rn
#define crypt_sha256_rn          _crypt_crypt_sha256_rn
#define crypt_sha512_rn          _crypt_crypt_sha512_rn
#define des_crypt_block          _crypt_des_crypt_block
#define des_set_key              _crypt_des_set_key
#define des_set_salt             _crypt_des_set_salt
#define fp_maskl                 _crypt_fp_maskl
#define fp_maskr                 _crypt_fp_maskr
#define gensalt_bcrypt_a_rn      _crypt_gensalt_bcrypt_a_rn
#define gensalt_bcrypt_b_rn      _crypt_gensalt_bcrypt_b_rn
#define gensalt_bcrypt_x_rn      _crypt_gensalt_bcrypt_x_rn
#define gensalt_bcrypt_y_rn      _crypt_gensalt_bcrypt_y_rn
#define gensalt_des_trd_rn       _crypt_gensalt_des_trd_rn
#define gensalt_des_xbsd_rn      _crypt_gensalt_des_xbsd_rn
#define gensalt_md5_rn           _crypt_gensalt_md5_rn
#define gensalt_sha256_rn        _crypt_gensalt_sha256_rn
#define gensalt_sha512_rn        _crypt_gensalt_sha512_rn
#define ip_maskl                 _crypt_ip_maskl
#define ip_maskr                 _crypt_ip_maskr
#define key_perm_maskl           _crypt_key_perm_maskl
#define key_perm_maskr           _crypt_key_perm_maskr
#define make_failure_token       _crypt_make_failure_token
#define md5_finish_ctx           _crypt_md5_finish_ctx
#define md5_init_ctx             _crypt_md5_init_ctx
#define md5_process_bytes        _crypt_md5_process_bytes
#define m_sbox                   _crypt_m_sbox
#define psbox                    _crypt_psbox
#define sha256_finish_ctx        _crypt_sha256_finish_ctx
#define sha256_init_ctx          _crypt_sha256_init_ctx
#define sha256_process_bytes     _crypt_sha256_process_bytes
#define sha512_finish_ctx        _crypt_sha512_finish_ctx
#define sha512_init_ctx          _crypt_sha512_init_ctx
#define sha512_process_bytes     _crypt_sha512_process_bytes

#endif /* crypt-symbols.h */
